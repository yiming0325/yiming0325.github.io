<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yiming&#39;s blog</title>
  
  <subtitle>Hello,world</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yiming0325.com/"/>
  <updated>2019-09-23T14:26:27.481Z</updated>
  <id>https://yiming0325.com/</id>
  
  <author>
    <name>YimingYuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test3</title>
    <link href="https://yiming0325.com/test3/"/>
    <id>https://yiming0325.com/test3/</id>
    <published>2019-09-23T14:21:46.000Z</published>
    <updated>2019-09-23T14:26:27.481Z</updated>
    
    <content type="html"><![CDATA[<p>dasdasads</p><p>d</p><p>sa</p><p>ds</p><p>ad</p><p>sa</p><p>ds</p><p>ad</p><p>sa</p><p>ds</p><p>a</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;dasdasads&lt;/p&gt;
&lt;p&gt;d&lt;/p&gt;
&lt;p&gt;sa&lt;/p&gt;
&lt;p&gt;ds&lt;/p&gt;
&lt;p&gt;ad&lt;/p&gt;
&lt;p&gt;sa&lt;/p&gt;
&lt;p&gt;ds&lt;/p&gt;
&lt;p&gt;ad&lt;/p&gt;
&lt;p&gt;sa&lt;/p&gt;
&lt;p&gt;ds&lt;/p&gt;
&lt;p&gt;a&lt;/p&gt;

      
    
    </summary>
    
      <category term="dsadsa" scheme="https://yiming0325.com/categories/dsadsa/"/>
    
    
      <category term="dsadsa" scheme="https://yiming0325.com/tags/dsadsa/"/>
    
  </entry>
  
  <entry>
    <title>test2</title>
    <link href="https://yiming0325.com/test2/"/>
    <id>https://yiming0325.com/test2/</id>
    <published>2019-07-21T14:27:59.000Z</published>
    <updated>2019-07-21T14:29:37.946Z</updated>
    
    <content type="html"><![CDATA[<p>dsadsadsa</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;dsadsadsa&lt;/p&gt;

      
    
    </summary>
    
      <category term="888" scheme="https://yiming0325.com/categories/888/"/>
    
    
      <category term="q1" scheme="https://yiming0325.com/tags/q1/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://yiming0325.com/test/"/>
    <id>https://yiming0325.com/test/</id>
    <published>2019-07-21T14:10:18.000Z</published>
    <updated>2019-07-21T14:12:34.491Z</updated>
    
    <content type="html"><![CDATA[<p>test</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;test&lt;/p&gt;

      
    
    </summary>
    
      <category term="知识碎片" scheme="https://yiming0325.com/categories/%E7%9F%A5%E8%AF%86%E7%A2%8E%E7%89%87/"/>
    
    
      <category term="hello" scheme="https://yiming0325.com/tags/hello/"/>
    
  </entry>
  
  <entry>
    <title>知识碎片：LevelDB</title>
    <link href="https://yiming0325.com/%E7%9F%A5%E8%AF%86%E7%A2%8E%E7%89%87LevelDB/"/>
    <id>https://yiming0325.com/知识碎片LevelDB/</id>
    <published>2018-12-21T02:54:16.000Z</published>
    <updated>2019-01-12T05:31:43.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-LevelDB介绍"><a href="#0x00-LevelDB介绍" class="headerlink" title="0x00 LevelDB介绍"></a>0x00 LevelDB介绍</h1><p>LevelDB是Google传奇工程师Jeff Dean和Sanjay Ghemawat开源的持久化KV存储引擎，具有很高的随机写，    顺序读/写性能，但是随机读的性能很一般，也就是说，<strong>LevelDB很适合应用在查询较少，而写很多的场景 。</strong>   LevelDB应用LSM（Log Structured Merge）策略，lsm_tree对索引变更进行延迟及批量处理，并通过一种类似于归并排序的方式高效地将更新迁移到磁盘，降低索引插入开销。</p><h1 id="0x01-LevelDB设计思路"><a href="#0x01-LevelDB设计思路" class="headerlink" title="0x01 LevelDB设计思路"></a>0x01 LevelDB设计思路</h1><p>LevelDB的数据是存储在磁盘上的，采用LSM-Tree的结构实现。LSM-Tree<strong>将磁盘的随机写转化为顺序写</strong>，从而大大提高了写速度。为了做到这一点LSM-Tree的思路是将索引树结构拆成一大一小两棵树，较小的一个常驻<strong>内存</strong>，较大的一个持久化到<strong>磁盘</strong>，他们共同维护一个有序的key空间，写入操作首先操作内存中的树，随着内存中树的不断变大，会出发与磁盘中树的归并操作，而归并操作本身仅有顺序写。如下图所示：  </p><p><img src="http://pk81c6tjy.bkt.clouddn.com/LSM-Tree.png" alt="LSM-Tree"></p><p>随着数据的不断写入，磁盘中的树会不断膨胀，为了避免每次参与归并操作的数据量过大，以及优化读操作的考虑，LevelDB将磁盘中的数据又拆分成多层，每一层的数据达到一定容量后会触发向下一层的归并操作，每一层的数据量比起上一层成倍增长。这也就是LevelDB的名称来源。</p><h1 id="0x02-LevelDB特点"><a href="#0x02-LevelDB特点" class="headerlink" title="0x02 LevelDB特点"></a>0x02 LevelDB特点</h1><p>LevelDB是一个持久化的KV系统，和Redis这种内存型的KV系统不同，LevelDB不会像Redis一样大量消耗内存，而是将大部分数据存储到磁盘上。  </p><p>LevelDB支持数据快照(snapshot)功能，使得读取操作不受写操作影响，可以在读操作过程中始终看到一致的数据。  </p><p>LevelDB支持数据压缩等操作，这对于减小存储空间以及增快IO效率有直接的帮助。  </p><p>LevelDB的写操作要大大快于读操作，顺序读写操作要大大快于随机读写操作。  </p><p>LevelDB是一种非关系型数据库(NoSQL)，不支持sql语句，也不支持索引。  </p><p>LevelDB没有内置的C/S架构，且一次只允许一个进程访问一个特定的数据库。  </p><h1 id="0x03-LevelDB整体结构"><a href="#0x03-LevelDB整体结构" class="headerlink" title="0x03 LevelDB整体结构"></a>0x03 LevelDB整体结构</h1><ul><li><p><strong>Memtable</strong> : 内存数据结构，调表实现，新的数据会首先写入这里</p></li><li><p><strong>Log文件</strong> ： 写Memtable前会先写Log文件，Log文件通过append的方式顺序写入。Log的存在使得机器宕机导致的存存数据丢失得以恢复。</p></li></ul><ul><li><strong>Immutable Memtable</strong> : 达到Memtable设置的容量上线后，Memtable会变为Immutable为之后向SSTW文件的归并做准备。顾名思义，Immutable Memtable不再接受用户写入，同时会有新的Memtable生成。</li><li><strong>SST文件</strong> ： 磁盘数据存储文件。分为Level 0 到Level N 多层，每一层包含多个SST文件；单层SST文件总量随层次增加成倍增长；文件内数据有序；其中Level 0 的SST文件有Immutable直接Dump产生，其他Level的SST文件由其上一层的文件和本层文件归并产生；SST文件在归并过程中顺序写生成，生成后仅可能在之后的归并中被删除，而不会有任何的修改操作。  </li><li><strong>Manifest文件</strong> ： Manifest文件中记录SST文件在不同Level的分布，单个SST文件的最大最小key，以及其他一些LevelDB需要的元信息。</li><li><strong>Current文件</strong> ： 从上面的介绍可以看出，LevelDB启动时的首要任务就是找到当前的Manifest，而Manifest可能有多个。Current文件简单记录了当前Manifest的文件名，从而让这个过程变得非常简单。   </li></ul><p><img src="http://pk81c6tjy.bkt.clouddn.com/%E6%95%B4%E4%BD%93%E7%BB%93%E6%9E%84.png" alt="整体结构"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://baike.baidu.com/item/LevelDB/6416354?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/LevelDB/6416354?fr=aladdin</a></p><p><a href="https://www.zhihu.com/question/19887265" target="_blank" rel="noopener">https://www.zhihu.com/question/19887265</a></p><p><a href="https://github.com/machicao2013/gitbook/blob/master/leveldb/implementation/advantages.md" target="_blank" rel="noopener">https://github.com/machicao2013/gitbook/blob/master/leveldb/implementation/advantages.md</a></p><p><a href="https://www.cnblogs.com/chenny7/p/4026447.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenny7/p/4026447.html</a></p><p><a href="http://catkang.github.io/2017/01/07/leveldb-summary.html" target="_blank" rel="noopener">http://catkang.github.io/2017/01/07/leveldb-summary.html</a></p><p><a href="https://chuansongme.com/n/949438" target="_blank" rel="noopener">https://chuansongme.com/n/949438</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x00-LevelDB介绍&quot;&gt;&lt;a href=&quot;#0x00-LevelDB介绍&quot; class=&quot;headerlink&quot; title=&quot;0x00 LevelDB介绍&quot;&gt;&lt;/a&gt;0x00 LevelDB介绍&lt;/h1&gt;&lt;p&gt;LevelDB是Google传奇工程师Jef
      
    
    </summary>
    
      <category term="知识碎片" scheme="https://yiming0325.com/categories/%E7%9F%A5%E8%AF%86%E7%A2%8E%E7%89%87/"/>
    
    
      <category term="LevelDB" scheme="https://yiming0325.com/tags/LevelDB/"/>
    
      <category term="知识碎片" scheme="https://yiming0325.com/tags/%E7%9F%A5%E8%AF%86%E7%A2%8E%E7%89%87/"/>
    
  </entry>
  
</feed>
